// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {IRouterClient} from "@ccip/contracts/src/v0.8/ccip/interfaces/IRouterClient.sol";
import {OwnerIsCreator} from "@ccip/contracts/src/v0.8/shared/access/OwnerIsCreator.sol";
import {Client} from "@ccip/contracts/src/v0.8/ccip/libraries/Client.sol";
import {CCIPReceiver} from "@ccip/contracts/src/v0.8/ccip/applications/CCIPReceiver.sol";

import {RebaseTokenBase} from "./RebaseTokenBase.sol";

contract DestRebaseToken is RebaseTokenBase {
    // this keeps track of the interest rate of the user at the time they last bridged and their destination tokens were updated to mint any accrued interest since they last bridged.
    mapping(address => uint256) public s_userInterestRate;
    // keep track of the timestamp when they last bridged or transferred their tokens. This will be the last time their balance was updated to mint accrued interest.
    mapping(address => uint256) public s_userLastUpdatedTimestamp;

    event PoolSet(address pool);
    event UserInterestRateUpdated(address indexed user, uint256 newUserInterestRate);

    error RebaseToken__SenderNotPool(address pool, address sender);

    constructor() RebaseTokenBase() {}

    modifier onlyPool() {
        if (msg.sender != s_pool) {
            revert RebaseToken__SenderNotPool(s_pool, msg.sender);
        }
        _;
    }

    /**
     * @dev sets the pool address after deployment. This is needed to ensure that only the pool can mint and burn tokens.
     * @param pool the address of the pool
     */
    function setPool(address pool) external onlyOwner {
        s_pool = pool;
        emit PoolSet(pool);
    }

    /**
     * @dev updates the interest rate. This is called only by the pool when a user bridges to this chain.
     * @param _interestRate the new interest rate
     * @notice this is called when a bridges tokens to this chain
     *
     */
    function setUserInterestRate(address _user, uint256 _interestRate) external onlyPool {
        // update the user's interest rate
        s_userInterestRate[_user] = _interestRate;
        // update the user's last updated timestamp to the current block timestamp
        s_userLastUpdatedTimestamp[_user] = block.timestamp;
        emit UserInterestRateUpdated(_user, _interestRate);
    }

    /**
     * @dev calculates the balance of the user, which is the
     * principal balance + interest generated by the principal balance
     * @param _user the user for which the balance is being calculated
     * @return the total balance of the user
     *
     */
    function balanceOf(address _user) public view override returns (uint256) {
        //current principal balance of the user
        uint256 currentPrincipalBalance = super.balanceOf(_user);
        if (currentPrincipalBalance == 0) {
            return 0;
        }
        // shares * current accumulated interest for that user since their interest was last minted to them.
        // do not need to normalize with the global accumulate interest as each individual user's interest is kept track of and there is no accumulatedInterest since the interest rate is static for users who have bridges. accumulated interest is only needed on the source token since the interest rate is updated by the protocol.
        return (currentPrincipalBalance * _calculateUserAccumulatedInterestSinceLastUpdate(_user) / PRECISION_FACTOR);
    }

    /// @notice Mints new tokens for a given address.
    /// @param account The address to mint the new tokens to.
    /// @param amount The number of tokens to be minted.
    /// @dev this function increases the total supply.
    function mint(address account, uint256 amount) public override onlyPool {
        super.mint(account, amount);
    }

    /// @notice Burns tokens from the sender.
    /// @param amount The number of tokens to be burned.
    /// @dev this function decreases the total supply.
    function burn(address account, uint256 amount) public override onlyPool {
        super.burn(account, amount);
    }

    /**
     * @dev returns the interest rate of the user
     * @param _user the address of the user
     * @return the interest rate of the user
     *
     */
    function getUserInterestRate(address _user) external view returns (uint256) {
        return s_userInterestRate[_user];
    }

    /**
     * @dev returns the interest accrued since the last update of the user's balance - aka since the last time the interest accrued was minted to the user.
     * @return the interest gained since the last update
     *
     */
    function _calculateUserAccumulatedInterestSinceLastUpdate(address _user) internal view returns (uint256) {
        uint256 timeDifference = block.timestamp - s_userLastUpdatedTimestamp[_user];
        // represents the linear growth over time = 1 + (interest rate * time)
        uint256 linearInterest = (s_userInterestRate[_user] * timeDifference) + PRECISION_FACTOR;
        // Calculate the total amount accumulated since the last update
        return linearInterest;
    }

    /**
     * @dev accumulates the accrued interest of the user to the principal balance. This function mints the users accrued interest since they last transferred or bridged tokens.
     * @param _user the address of the user for which the interest is being minted
     * @return the users new balance
     *
     */
    function _mintAccruedInterest(address _user) internal override returns (uint256) {
        // Get the user's previous principal balance. The amount of tokens they had last time their interest was minted to them.
        uint256 previousPrincipalBalance = super.balanceOf(_user);

        // Calculate the accrued interest since the last accumulation
        // `balanceOf` uses the user's interest rate and the time since their last update to get the updated balance
        uint256 currentBalance = balanceOf(_user);
        uint256 balanceIncrease = currentBalance - previousPrincipalBalance;

        // Mint an amount of tokens equivalent to the interest accrued
        _mint(_user, balanceIncrease);
        // Update the user's last updated timestamp to reflect this most recent time their interest was minted to them.
        s_userLastUpdatedTimestamp[_user] = block.timestamp;
        return (currentBalance);
    }

    // /**
    //  * @dev executes the transfer of tokens, invoked by _transfer(), _mint() and _burn()
    //  * @param _from the address from which transfer the tokens
    //  * @param _to the destination address
    //  * @param _value the amount to transfer
    //  *
    //  */
    // function _beforeUpdate(address _from, address _to, uint256 _value) internal override {
    //     if (_from != address(0)) {
    //         // we are burning or transferring tokens
    //         // mint any accrued interest since the last time the user's balance was updated
    //         (uint256 fromBalance) = _mintAccruedInterest(_from);
    //         if (fromBalance - _value == 0) {
    //             // NOTE: do i need to do this?
    //             s_userInterestRate[_from] = 0;
    //             s_userLastUpdatedTimestamp[_from] = 0;
    //         }
    //         emit FromInterestAccrued(_from, fromBalance);
    //     }
    //     if (_to != address(0)) {
    //         // we are minting or transferring tokens
    //         // mint any accrued interest since the last time the user's balance was updated
    //         (uint256 toBalance) = _mintAccruedInterest(_to);
    //         emit ToInterestAccrued(_to, toBalance);
    //     }
    // }
}
