// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {IRouterClient} from "@ccip/contracts/src/v0.8/ccip/interfaces/IRouterClient.sol";
import {OwnerIsCreator} from "@ccip/contracts/src/v0.8/shared/access/OwnerIsCreator.sol";
import {Client} from "@ccip/contracts/src/v0.8/ccip/libraries/Client.sol";
import {CCIPReceiver} from "@ccip/contracts/src/v0.8/ccip/applications/CCIPReceiver.sol";

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";

contract RebaseToken is ERC20, Ownable, AccessControl {
    uint256 public constant PRECISION_FACTOR = 1e18; // Used to handle fixed-point calculations
    // this keeps track of the interest rate of the user at the time they last bridged and their destination tokens were updated to mint any accrued interest since they last bridged.
    mapping(address => uint256) public s_userInterestRate;
    // keep track of the timestamp when they last bridged or transferred their tokens. This will be the last time their balance was updated to mint accrued interest.
    mapping(address => uint256) public s_userLastUpdatedTimestamp;
    uint256 public s_interestRate = 5e10; // this is the global interest rate of the token - when users mint, this is the interest rate they will get.
    bytes32 public constant MINT_AND_BURN_ROLE = keccak256("MINT_AND_BURN_ROLE");

    event UserInterestRateUpdated(address indexed user, uint256 newUserInterestRate);
    event ToInterestAccrued(address user, uint256 balance);
    event FromInterestAccrued(address user, uint256 balance);
    event InterestRateUpdated(uint256 newInterestRate);

    constructor() Ownable(msg.sender) ERC20("RebaseToken", "RBT") {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(MINT_AND_BURN_ROLE, msg.sender);
    }

    function getInterestRate() external view returns (uint256) {
        return s_interestRate;
    }

    /**
     * @dev returns the interest rate of the user
     * @param _user the address of the user
     * @return the interest rate of the user
     *
     */
    function getUserInterestRate(address _user) external view returns (uint256) {
        return s_userInterestRate[_user];
    }

    function setInterestRate(uint256 _interestRate) external onlyRole(MINT_AND_BURN_ROLE) {
        // only allow the interest rate to decrease but we don't want it to revert in case it's the destination chain that is updating the interest rate (in which case it'll either be the same or larger so it won't update)
        if (_interestRate < s_interestRate) {
            // if this is coming from the destination chain, this wont be updated since it will be greater than the current interest rate
            s_interestRate = _interestRate;
            emit InterestRateUpdated(_interestRate);
        }
    }

    /// @notice Mints new tokens for a given address.
    /// @param _account The address to mint the tokens to.
    /// @param _value The number of tokens to mint.
    /// @param _interestRate The interest rate of the user.
    /// @dev this function increases the total supply.
    function mint(address _account, uint256 _value, uint256 _interestRate) public onlyRole(MINT_AND_BURN_ROLE) {
        // Mints any existing interest that has accrued since the last time the user's balance was updated.
        _beforeUpdate(address(0), _account);
        // Sets the users interest rate to either their bridged value if they are bridging or to the current interest rate if they are depositing.
        _setUserInterestRate(_account, _interestRate);
        _mint(_account, _value);
    }

    /// @notice Burns tokens from the sender.
    /// @param _account The address to burn the tokens from.
    /// @param _value The number of tokens to be burned
    /// @dev this function decreases the total supply.
    function burn(address _account, uint256 _value) public onlyRole(MINT_AND_BURN_ROLE) {
        // Mints any existing interest that has accrued since the last time the user's balance was updated.
        _beforeUpdate(_account, address(0));
        _burn(_account, _value);
    }

    /**
     * @dev calculates the balance of the user, which is the
     * principal balance + interest generated by the principal balance
     * @param _user the user for which the balance is being calculated
     * @return the total balance of the user
     *
     */
    function balanceOf(address _user) public view override returns (uint256) {
        //current principal balance of the user
        uint256 currentPrincipalBalance = super.balanceOf(_user);
        if (currentPrincipalBalance == 0) {
            return 0;
        }
        // shares * current accumulated interest for that user since their interest was last minted to them.
        // do not need to normalize with the global accumulate interest as each individual user's interest is kept track of and there is no accumulatedInterest since the interest rate is static for users who have bridges. accumulated interest is only needed on the source token since the interest rate is updated by the protocol.
        return (currentPrincipalBalance * _calculateUserAccumulatedInterestSinceLastUpdate(_user) / PRECISION_FACTOR);
    }

    /**
     * @dev returns the principal balance of the user. The principal balance is the last
     * updated stored balance, which does not consider the perpetually accruing interest.
     * @param _user the address of the user
     * @return the principal balance of the user
     *
     */
    function principalBalanceOf(address _user) external view returns (uint256) {
        return super.balanceOf(_user);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        // accumulates the balance of the user so it is up to date with any interest accumulated.
        // also sets the user's accumulated rate (source token) or last updated timestamp (destination token)
        _beforeUpdate(msg.sender, recipient);
        if (s_userInterestRate[recipient] == 0) {
            // only update the user's interest rate if they have not yet got one. Otherwise people could force others to have lower interest.
            _setUserInterestRate(recipient, s_interestRate);
        }
        return super.transfer(recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        // accumulates the balance of the user so it is up to date with any interest accumulated.
        // also sets the user's accumulated rate (source token) or last updated timestamp (destination token)
        _beforeUpdate(sender, recipient);
        if (s_userInterestRate[recipient] == 0) {
            // only update the user's interest rate if they have not yet got one. Otherwise people could force others to have lower interest.
            _setUserInterestRate(recipient, s_interestRate);
        }
        return super.transferFrom(sender, recipient, amount);
    }

    /**
     * @dev updates the interest rate. This is called only by the pool when a user bridges to this chain.
     * @param _interestRate the new interest rate
     * @notice this is called when a bridges tokens to this chain
     *
     */
    function _setUserInterestRate(address _user, uint256 _interestRate) internal {
        // needs to be called alongside _beforeUpdate to make sure the users last updated timestamp is set.
        // update the user's interest rate
        s_userInterestRate[_user] = _interestRate;
        emit UserInterestRateUpdated(_user, _interestRate);
    }

    /**
     * @dev returns the interest accrued since the last update of the user's balance - aka since the last time the interest accrued was minted to the user.
     * @return linearInterest the interest accrued since the last update
     *
     */
    function _calculateUserAccumulatedInterestSinceLastUpdate(address _user)
        internal
        view
        returns (uint256 linearInterest)
    {
        uint256 timeDifference = block.timestamp - s_userLastUpdatedTimestamp[_user];
        // represents the linear growth over time = 1 + (interest rate * time)
        linearInterest = (s_userInterestRate[_user] * timeDifference) + PRECISION_FACTOR;
    }

    /**
     * @dev accumulates the accrued interest of the user to the principal balance. This function mints the users accrued interest since they last transferred or bridged tokens.
     * @param _user the address of the user for which the interest is being minted
     * @return the users new balance
     *
     */
    function _mintAccruedInterest(address _user) internal returns (uint256) {
        // Get the user's previous principal balance. The amount of tokens they had last time their interest was minted to them.
        uint256 previousPrincipalBalance = super.balanceOf(_user);

        // Calculate the accrued interest since the last accumulation
        // `balanceOf` uses the user's interest rate and the time since their last update to get the updated balance
        uint256 currentBalance = balanceOf(_user);
        uint256 balanceIncrease = currentBalance - previousPrincipalBalance;

        // Mint an amount of tokens equivalent to the interest accrued
        _mint(_user, balanceIncrease);
        // Update the user's last updated timestamp to reflect this most recent time their interest was minted to them.
        s_userLastUpdatedTimestamp[_user] = block.timestamp;
        return (currentBalance);
    }

    /**
     * @dev executes the transfer of tokens, invoked by _transfer(), _mint() and _burn()
     * @param _from the address from which transfer the tokens
     * @param _to the destination address
     *
     */
    function _beforeUpdate(address _from, address _to) internal {
        if (_from != address(0)) {
            // we are burning or transferring tokens
            // mint any accrued interest since the last time the user's balance was updated
            (uint256 fromBalance) = _mintAccruedInterest(_from);
            // if (fromBalance - _value == 0) {
            //     // NOTE: do i need to do this?
            //     s_userInterestRate[_from] = 0;
            //     s_userLastUpdatedTimestamp[_from] = 0;
            // }
            emit FromInterestAccrued(_from, fromBalance);
        }
        if (_to != address(0)) {
            // we are minting or transferring tokens
            // mint any accrued interest since the last time the user's balance was updated
            (uint256 toBalance) = _mintAccruedInterest(_to);
            emit ToInterestAccrued(_to, toBalance);
        }
    }
}
